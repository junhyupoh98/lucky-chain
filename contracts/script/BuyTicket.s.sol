// BuyTicket.s.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "forge-std/Script.sol";
import "forge-std/console.sol"; // <--- 이 줄이 반드시 있어야 합니다!
import "../src/Lotto.sol";
contract BuyTicket is Script {
    function run() external {
        // 1. 이전에 배포한 Lotto.sol 컨트랙트의 주소
        //    Lotto.sol을 새로 배포하고 그 주소를 여기에 넣어야 합니다.
        address contractAddress = 0x0a7159b1f1A072c9bf3c3e3A93ed15D7749Ed081; // ⚠️ Lotto 컨트랙트 주소로 변경!

        // 2. Lotto 컨트랙트의 인스턴스를 가져옵니다.
        Lotto lotto = Lotto(contractAddress);

        // 3. 구매할 티켓의 정보 설정
        //    (실제 서비스에서는 이 번호들을 프론트엔드에서 받아옵니다)
        
        // --- 예시 1: 사용자가 직접 번호를 지정한 경우 ---
        uint8[6] memory userSelectedNumbers = [5, 12, 21, 33, 40, 45];

        // --- 예시 2: "자동 생성"을 눌러 랜덤 번호를 받은 경우 (프론트엔드가 생성) ---
        // uint8[6] memory autoGeneratedNumbers = [1, 8, 19, 23, 31, 42];

        // 4. 이 티켓의 메타데이터 URI (피나타에 올린 JSON 주소)
        //    실제로는 각 번호에 맞는 메타데이터를 동적으로 생성하고 업로드해야 합니다.
        string memory tokenUri = "ipfs://https://gateway.pinata.cloud/ipfs/ + CID";

        // 5. 컨트랙트에서 설정한 티켓 가격을 가져옵니다.
        uint256 price = lotto.ticketPrice();
        
        // --- 실제 트랜잭션 전송 ---
        vm.startBroadcast();

        // buyTicket 함수를 호출합니다.
        // ⚠️ createNewToken이 아닌 buyTicket을 호출하는 것에 주목하세요!
        // ⚠️ 티켓 가격(price)을 함께 보내는 것에 주목하세요!
        lotto.buyTicket{value: price}(userSelectedNumbers, tokenUri);
        
        vm.stopBroadcast();

    console.log("--- Ticket Purchase Successful! ---");
    console.log("Purchased Ticket ID: 0"); // 첫 티켓이므로 ID는 0입니다.
    console.log("--- Purchased Numbers ---");
    console.log(userSelectedNumbers[0]);
    console.log(userSelectedNumbers[1]);
    console.log(userSelectedNumbers[2]);
    console.log(userSelectedNumbers[3]);
    console.log(userSelectedNumbers[4]);
    console.log(userSelectedNumbers[5]);
    console.log("--------------------------");
    }
}